@using GloboCrypto.PWA.Services
@using GloboCrypto.Models.Data

@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject IAppStorageService AppStorageService
@inject ICoinAPIService CoinAPIService

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="coinDialog" tabindex="-1" role="dialog">
        <div class="modal-dialog-scrollable" role="document">
            <div class="modal-content coinmodal">
                <div class="modal-header">
                    @if (CoinIsInList)
                    {
                        <button class="btn btn-danger btn-circle btn-lg" @onclick="@(() => RemoveCoinFromList())" @onclick:stopPropagation="true" aria-label="Remove from list"><span class="oi oi-trash"></span></button>
                    }
                    else
                    {
                        <button class="btn btn-action-pos btn-circle btn-lg" @onclick="@(() => AddCoinToList())" aria-label="Add to list"><span class="oi oi-plus"></span></button>
                    }
                    <button type="button" class="btn btn-light btn-circle btn-lg" @onclick="@(() => Close())" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true" class="oi oi-x"></span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (Coin == null)
                    {
                        <p><em>Fetching Coin Details...</em></p>
                    }
                    else
                    {
                        <img src="@Coin.LogoUrl" width=100px height=100px alt="Coin Icon" />
                        <h2>@Coin.Name</h2>
                        <p class="coin-description">@Coin.Description</p>
                    }
                </div>
            </div>
        </div>
    </div>

}
@code {
    [Parameter]
    public string coinId { get;set;}
    [Parameter]
    public EventCallback<bool> CloseEventCallback {  get;set; }

    private CoinInfo Coin;
    private bool CoinIsInList { get; set; }
    public bool ShowDialog { get; set; }

    public async Task Close()
    {
        ShowDialog = false;
        await CloseEventCallback.InvokeAsync(true);
        StateHasChanged();
    }

    public async Task Show(string id)
    {
        coinId = id;
        Coin = null;
        ShowDialog = true;
        Coin = (await CoinAPIService.GetCoinInfo(coinId));
        var coinIds = await AppStorageService.GetCoinListAsync() ?? new List<CoinInfo>();
        CoinIsInList = coinIds.FirstOrDefault(coin => coin.Id == coinId) != null;
        StateHasChanged();
    }

    private async void AddCoinToList()
    {
        var coinIds = await AppStorageService.GetCoinListAsync() ?? new List<CoinInfo>();
        coinIds.Add(Coin);
        await AppStorageService.SaveCoinListAsync(coinIds);
        await Close();
        ToastService.ShowSuccess($"{Coin.Name} added to your list");
    }

    private async Task RemoveCoinFromList()
    {
        var coinIds = await AppStorageService.GetCoinListAsync() ?? new List<CoinInfo>();
        var coinCache = await AppStorageService.GetCoinTrackerCacheAsync() ?? new Models.CoinTrackerCache();

        var listCoin = coinIds.FirstOrDefault(coin => coin.Id == coinId);
        coinIds.Remove(listCoin);
        //var coinCacheList = coinCache.CoinPrices.ToList();
        //var thisCoin = coinCacheList.FirstOrDefault(coin => coin.Id == coinId);
        //coinCacheList.Remove(thisCoin);
        //coinCache.CoinPrices = coinCacheList;

        await AppStorageService.SaveCoinListAsync(coinIds);
        //await AppStorageService.SaveCoinTrackerCacheAsync(coinCache);
        await Close();
        ToastService.ShowWarning($"{Coin.Name} removed from your list");
    }

}
